#include "helpers/basic_inner_types.idl"

typedef short alias_array[2];
typedef sequence<short> alias_sequence;
typedef map<long, long> alias_map;

struct MapShort
{
    map<long, short> var_map_short;
};

struct MapUShort
{
    map<long, unsigned short> var_map_ushort;
};

struct MapLong
{
    map<long, long> var_map_long;
};

struct MapULong
{
    map<long, unsigned long> var_map_ulong;
};

struct MapLongLong
{
    map<long, long long> var_map_longlong;
};

struct MapULongLong
{
    map<long, unsigned long long> var_map_ulonglong;
};

struct MapFloat
{
    map<long, float> var_map_float;
};

struct MapDouble
{
    map<long, double> var_map_double;
};

struct MapLongDouble
{
    map<long, long double> var_map_longdouble;
};

struct MapBoolean
{
    map<long, bool> var_map_boolean;
};

struct MapOctet
{
    map<long, octet> var_map_octet;
};

struct MapChar
{
    map<long, char> var_map_char;
};

struct MapWChar
{
    map<long, wchar> var_map_wchar;
};

struct MapString
{
    map<long, string> var_map_string;
};

struct MapWString
{
    map<long, wstring> var_map_wstring;
};

struct MapEnum
{
    map<long, MyEnum> var_map_enum;
};

struct MapBitMask
{
    map<long, MyBitMask> var_map_bitmask;
};

struct MapAlias
{
    map<long, MyAlias> var_map_alias;
};

struct MapShortArray
{
    map<long, alias_array> var_map_short_array;
};

struct MapSequence
{
    map<long, alias_sequence> var_map_sequence;
};

struct MapMap
{
    map<long, alias_map> var_map_map;
};

struct MapUnion
{
    map<long, MyUnion> var_map_union;
};

struct MapStructure
{
    map<long, MyStructure> var_map_structure;
};

struct MapBitset
{
    map<long, MyBitset> var_map_bitset;
};
    


struct MapKeyShort
{
    std::map<short, short> var_map_short;
};

struct MapKeyUShort
{
    std::map<unsigned short, unsigned short> var_map_ushort;
};

struct MapKeyLong
{
    std::map<long, long> var_map_long;
};

struct MapKeyULong
{
    std::map<unsigned long, unsigned long> var_map_ulong;
};

struct MapKeyLongLong
{
    std::map<long long, long long> var_map_longlong;
};

struct MapKeyULongLong
{
    std::map<unsigned long long, unsigned long long> var_map_ulonglong;
};

struct MapKeyFloat
{
    std::map<float, float> var_map_float;
};

struct MapKeyDouble
{
    std::map<double, double> var_map_double;
};

struct MapKeyLongDouble
{
    std::map<long double, long double> var_map_longdouble;
};

struct MapKeyBoolean
{
    std::map<bool, bool> var_map_boolean;
};

struct MapKeyOctet
{
    std::map<octet, octet> var_map_octet;
};

struct MapKeyChar
{
    std::map<char, char> var_map_char;
};

struct MapKeyWChar
{
    std::map<wchar, wchar> var_map_wchar;
};

struct MapKeyString
{
    std::map<long, std::string> var_map_string;
};

struct MapKeyWString
{
    std::map<std::wstring, std::wstring> var_map_wstring;
};

struct MapKeyEnum
{
    std::map<MyEnum, MyEnum> var_map_enum;
};

struct MapKeyBitMask
{
    std::map<MyBitMask, MyBitMask> var_map_bitmask;
};

struct MapKeyAlias
{
    std::map<MyAlias, MyAlias> var_map_alias;
};

struct MapKeyAliasArray
{
    std::map<alias_array, alias_array> var_map_short_array;
};

struct MapKeyAliasSequence
{
    std::map<alias_sequence, alias_sequence> var_map_sequence;
};

struct MapKeyAliasMap
{
    std::map<alias_map, alias_map> var_map_map;
};

struct MapKeyUnion
{
    std::map<MyUnion, MyUnion> var_map_union;
};

struct MapKeyStructure
{
    std::map<MyStructure, MyStructure> var_map_structure;
};

struct MapKeyBitset
{
    std::map<MyBitset, MyBitset> var_map_bitset;
};


struct MapKeyShort
{
    map<short, short> var_map_short;
};

struct MapKeyUShort
{
    map<unsigned short, unsigned short> var_map_ushort;
};


struct BoundedSmallMap
{
    map<long,long,1> var_small_map;
};

struct BoundedLargeMap
{
    map<long,long,41925> var_large_map;
};
